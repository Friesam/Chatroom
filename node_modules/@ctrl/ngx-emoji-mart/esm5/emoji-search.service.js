/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { categories, EmojiService, } from '@ctrl/ngx-emoji-mart/ngx-emoji';
import { intersect } from './utils';
import * as i0 from "@angular/core";
import * as i1 from "@ctrl/ngx-emoji-mart/ngx-emoji";
var EmojiSearch = /** @class */ (function () {
    function EmojiSearch(emojiService) {
        var e_1, _a;
        var _this = this;
        this.emojiService = emojiService;
        this.originalPool = {};
        this.index = {};
        this.emojisList = {};
        this.emoticonsList = {};
        this.emojiSearch = {};
        var _loop_1 = function (emojiData) {
            var shortNames = emojiData.shortNames, emoticons = emojiData.emoticons;
            /** @type {?} */
            var id = shortNames[0];
            emoticons.forEach((/**
             * @param {?} emoticon
             * @return {?}
             */
            function (emoticon) {
                if (_this.emoticonsList[emoticon]) {
                    return;
                }
                _this.emoticonsList[emoticon] = id;
            }));
            this_1.emojisList[id] = this_1.emojiService.getSanitizedData(id);
            this_1.originalPool[id] = emojiData;
        };
        var this_1 = this;
        try {
            for (var _b = tslib_1.__values(this.emojiService.emojis), _c = _b.next(); !_c.done; _c = _b.next()) {
                var emojiData = _c.value;
                _loop_1(emojiData);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    /**
     * @param {?} custom
     * @param {?} pool
     * @return {?}
     */
    EmojiSearch.prototype.addCustomToPool = /**
     * @param {?} custom
     * @param {?} pool
     * @return {?}
     */
    function (custom, pool) {
        var _this = this;
        custom.forEach((/**
         * @param {?} emoji
         * @return {?}
         */
        function (emoji) {
            /** @type {?} */
            var emojiId = emoji.id || emoji.shortNames[0];
            if (emojiId && !pool[emojiId]) {
                pool[emojiId] = _this.emojiService.getData(emoji);
                _this.emojisList[emojiId] = _this.emojiService.getSanitizedData(emoji);
            }
        }));
    };
    /**
     * @param {?} value
     * @param {?=} emojisToShowFilter
     * @param {?=} maxResults
     * @param {?=} include
     * @param {?=} exclude
     * @param {?=} custom
     * @return {?}
     */
    EmojiSearch.prototype.search = /**
     * @param {?} value
     * @param {?=} emojisToShowFilter
     * @param {?=} maxResults
     * @param {?=} include
     * @param {?=} exclude
     * @param {?=} custom
     * @return {?}
     */
    function (value, emojisToShowFilter, maxResults, include, exclude, custom) {
        var _this = this;
        if (maxResults === void 0) { maxResults = 75; }
        if (include === void 0) { include = []; }
        if (exclude === void 0) { exclude = []; }
        if (custom === void 0) { custom = []; }
        this.addCustomToPool(custom, this.originalPool);
        /** @type {?} */
        var results;
        /** @type {?} */
        var pool = this.originalPool;
        if (value.length) {
            if (value === '-' || value === '-1') {
                return [this.emojisList['-1']];
            }
            /** @type {?} */
            var values = value.toLowerCase().split(/[\s|,|\-|_]+/);
            /** @type {?} */
            var allResults = [];
            if (values.length > 2) {
                values = [values[0], values[1]];
            }
            if (include.length || exclude.length) {
                pool = {};
                categories.forEach((/**
                 * @param {?} category
                 * @return {?}
                 */
                function (category) {
                    /** @type {?} */
                    var isIncluded = include && include.length
                        ? include.indexOf(category.id) > -1
                        : true;
                    /** @type {?} */
                    var isExcluded = exclude && exclude.length
                        ? exclude.indexOf(category.id) > -1
                        : false;
                    if (!isIncluded || isExcluded) {
                        return;
                    }
                    (/** @type {?} */ (category.emojis)).forEach((/**
                     * @param {?} emojiId
                     * @return {?}
                     */
                    function (emojiId) { return (pool[emojiId] = _this.emojiService.names[emojiId]); }));
                }));
                if (custom.length) {
                    /** @type {?} */
                    var customIsIncluded = include && include.length ? include.indexOf('custom') > -1 : true;
                    /** @type {?} */
                    var customIsExcluded = exclude && exclude.length ? exclude.indexOf('custom') > -1 : false;
                    if (customIsIncluded && !customIsExcluded) {
                        this.addCustomToPool(custom, pool);
                    }
                }
            }
            allResults = values
                .map((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                /** @type {?} */
                var aPool = pool;
                /** @type {?} */
                var aIndex = _this.index;
                /** @type {?} */
                var length = 0;
                var _loop_2 = function (charIndex) {
                    var e_2, _a;
                    /** @type {?} */
                    var char = v[charIndex];
                    length++;
                    if (!aIndex[char]) {
                        aIndex[char] = {};
                    }
                    aIndex = aIndex[char];
                    if (!aIndex.results) {
                        /** @type {?} */
                        var scores_1 = {};
                        aIndex.results = [];
                        aIndex.pool = {};
                        try {
                            for (var _b = tslib_1.__values(Object.keys(aPool)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var id = _c.value;
                                /** @type {?} */
                                var emoji = aPool[id];
                                if (!_this.emojiSearch[id]) {
                                    _this.emojiSearch[id] = _this.buildSearch(emoji.short_names, emoji.name, emoji.keywords, emoji.emoticons);
                                }
                                /** @type {?} */
                                var query = _this.emojiSearch[id];
                                /** @type {?} */
                                var sub = v.substr(0, length);
                                /** @type {?} */
                                var subIndex = query.indexOf(sub);
                                if (subIndex !== -1) {
                                    /** @type {?} */
                                    var score = subIndex + 1;
                                    if (sub === id) {
                                        score = 0;
                                    }
                                    aIndex.results.push(_this.emojisList[id]);
                                    aIndex.pool[id] = emoji;
                                    scores_1[id] = score;
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        aIndex.results.sort((/**
                         * @param {?} a
                         * @param {?} b
                         * @return {?}
                         */
                        function (a, b) {
                            /** @type {?} */
                            var aScore = scores_1[a.id];
                            /** @type {?} */
                            var bScore = scores_1[b.id];
                            return aScore - bScore;
                        }));
                    }
                    aPool = aIndex.pool;
                };
                for (var charIndex = 0; charIndex < v.length; charIndex++) {
                    _loop_2(charIndex);
                }
                return aIndex.results;
            }))
                .filter((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return a; }));
            if (allResults.length > 1) {
                results = intersect.apply(null, (/** @type {?} */ (allResults)));
            }
            else if (allResults.length) {
                results = allResults[0];
            }
            else {
                results = [];
            }
        }
        if (results) {
            if (emojisToShowFilter) {
                results = results.filter((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    return emojisToShowFilter(_this.emojiService.names[result.id]);
                }));
            }
            if (results && results.length > maxResults) {
                results = results.slice(0, maxResults);
            }
        }
        return results || null;
    };
    /**
     * @param {?} short_names
     * @param {?} name
     * @param {?} keywords
     * @param {?} emoticons
     * @return {?}
     */
    EmojiSearch.prototype.buildSearch = /**
     * @param {?} short_names
     * @param {?} name
     * @param {?} keywords
     * @param {?} emoticons
     * @return {?}
     */
    function (short_names, name, keywords, emoticons) {
        /** @type {?} */
        var search = [];
        /** @type {?} */
        var addToSearch = (/**
         * @param {?} strings
         * @param {?} split
         * @return {?}
         */
        function (strings, split) {
            if (!strings) {
                return;
            }
            (Array.isArray(strings) ? strings : [strings]).forEach((/**
             * @param {?} string
             * @return {?}
             */
            function (string) {
                (split ? string.split(/[-|_|\s]+/) : [string]).forEach((/**
                 * @param {?} s
                 * @return {?}
                 */
                function (s) {
                    s = s.toLowerCase();
                    if (!search.includes(s)) {
                        search.push(s);
                    }
                }));
            }));
        });
        addToSearch(short_names, true);
        addToSearch(name, true);
        addToSearch(keywords, false);
        addToSearch(emoticons, false);
        return search.join(',');
    };
    EmojiSearch.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    EmojiSearch.ctorParameters = function () { return [
        { type: EmojiService }
    ]; };
    /** @nocollapse */ EmojiSearch.ngInjectableDef = i0.defineInjectable({ factory: function EmojiSearch_Factory() { return new EmojiSearch(i0.inject(i1.EmojiService)); }, token: EmojiSearch, providedIn: "root" });
    return EmojiSearch;
}());
export { EmojiSearch };
if (false) {
    /** @type {?} */
    EmojiSearch.prototype.originalPool;
    /** @type {?} */
    EmojiSearch.prototype.index;
    /** @type {?} */
    EmojiSearch.prototype.emojisList;
    /** @type {?} */
    EmojiSearch.prototype.emoticonsList;
    /** @type {?} */
    EmojiSearch.prototype.emojiSearch;
    /**
     * @type {?}
     * @private
     */
    EmojiSearch.prototype.emojiService;
}
//# sourceMappingURL=data:application/json;base64,