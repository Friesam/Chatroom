/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var EmojiFrequentlyService = /** @class */ (function () {
    function EmojiFrequentlyService() {
        this.NAMESPACE = 'emoji-mart';
        this.frequently = null;
        this.defaults = {};
        this.initialized = false;
        this.DEFAULTS = [
            '+1',
            'grinning',
            'kissing_heart',
            'heart_eyes',
            'laughing',
            'stuck_out_tongue_winking_eye',
            'sweat_smile',
            'joy',
            'scream',
            'disappointed',
            'unamused',
            'weary',
            'sob',
            'sunglasses',
            'heart',
            'poop',
        ];
    }
    /**
     * @return {?}
     */
    EmojiFrequentlyService.prototype.init = /**
     * @return {?}
     */
    function () {
        this.frequently = JSON.parse(localStorage.getItem(this.NAMESPACE + ".frequently") || 'null');
        this.initialized = true;
    };
    /**
     * @param {?} emoji
     * @return {?}
     */
    EmojiFrequentlyService.prototype.add = /**
     * @param {?} emoji
     * @return {?}
     */
    function (emoji) {
        if (!this.initialized) {
            this.init();
        }
        if (!this.frequently) {
            this.frequently = this.defaults;
        }
        if (!this.frequently[emoji.id]) {
            this.frequently[emoji.id] = 0;
        }
        this.frequently[emoji.id] += 1;
        localStorage.setItem(this.NAMESPACE + ".last", emoji.id);
        localStorage.setItem(this.NAMESPACE + ".frequently", JSON.stringify(this.frequently));
    };
    /**
     * @param {?} perLine
     * @param {?} totalLines
     * @return {?}
     */
    EmojiFrequentlyService.prototype.get = /**
     * @param {?} perLine
     * @param {?} totalLines
     * @return {?}
     */
    function (perLine, totalLines) {
        var _this = this;
        if (!this.initialized) {
            this.init();
        }
        if (this.frequently === null) {
            this.defaults = {};
            /** @type {?} */
            var result = [];
            for (var i = 0; i < perLine; i++) {
                this.defaults[this.DEFAULTS[i]] = perLine - i;
                result.push(this.DEFAULTS[i]);
            }
            return result;
        }
        /** @type {?} */
        var quantity = perLine * totalLines;
        /** @type {?} */
        var frequentlyKeys = Object.keys(this.frequently);
        /** @type {?} */
        var sorted = frequentlyKeys
            .sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) { return (/** @type {?} */ (_this.frequently))[a] - (/** @type {?} */ (_this.frequently))[b]; }))
            .reverse();
        /** @type {?} */
        var sliced = sorted.slice(0, quantity);
        /** @type {?} */
        var last = localStorage.getItem(this.NAMESPACE + ".last");
        if (last && !sliced.includes(last)) {
            sliced.pop();
            sliced.push(last);
        }
        return sliced;
    };
    EmojiFrequentlyService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */ EmojiFrequentlyService.ngInjectableDef = i0.defineInjectable({ factory: function EmojiFrequentlyService_Factory() { return new EmojiFrequentlyService(); }, token: EmojiFrequentlyService, providedIn: "root" });
    return EmojiFrequentlyService;
}());
export { EmojiFrequentlyService };
if (false) {
    /** @type {?} */
    EmojiFrequentlyService.prototype.NAMESPACE;
    /** @type {?} */
    EmojiFrequentlyService.prototype.frequently;
    /** @type {?} */
    EmojiFrequentlyService.prototype.defaults;
    /** @type {?} */
    EmojiFrequentlyService.prototype.initialized;
    /** @type {?} */
    EmojiFrequentlyService.prototype.DEFAULTS;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1vamktZnJlcXVlbnRseS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGN0cmwvbmd4LWVtb2ppLW1hcnQvIiwic291cmNlcyI6WyJlbW9qaS1mcmVxdWVudGx5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSTNDO0lBQUE7UUFFRSxjQUFTLEdBQUcsWUFBWSxDQUFDO1FBQ3pCLGVBQVUsR0FBcUMsSUFBSSxDQUFDO1FBQ3BELGFBQVEsR0FBOEIsRUFBRSxDQUFDO1FBQ3pDLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLGFBQVEsR0FBRztZQUNULElBQUk7WUFDSixVQUFVO1lBQ1YsZUFBZTtZQUNmLFlBQVk7WUFDWixVQUFVO1lBQ1YsOEJBQThCO1lBQzlCLGFBQWE7WUFDYixLQUFLO1lBQ0wsUUFBUTtZQUNSLGNBQWM7WUFDZCxVQUFVO1lBQ1YsT0FBTztZQUNQLEtBQUs7WUFDTCxZQUFZO1lBQ1osT0FBTztZQUNQLE1BQU07U0FDUCxDQUFDO0tBb0RIOzs7O0lBbERDLHFDQUFJOzs7SUFBSjtRQUNFLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFJLElBQUksQ0FBQyxTQUFTLGdCQUFhLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQztRQUM3RixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztJQUMxQixDQUFDOzs7OztJQUNELG9DQUFHOzs7O0lBQUgsVUFBSSxLQUFnQjtRQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNyQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDYjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3BCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUNqQztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUM5QixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDL0I7UUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFL0IsWUFBWSxDQUFDLE9BQU8sQ0FBSSxJQUFJLENBQUMsU0FBUyxVQUFPLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELFlBQVksQ0FBQyxPQUFPLENBQUksSUFBSSxDQUFDLFNBQVMsZ0JBQWEsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQ3hGLENBQUM7Ozs7OztJQUNELG9DQUFHOzs7OztJQUFILFVBQUksT0FBZSxFQUFFLFVBQWtCO1FBQXZDLGlCQThCQztRQTdCQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNyQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDYjtRQUNELElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxJQUFJLEVBQUU7WUFDNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7O2dCQUNiLE1BQU0sR0FBRyxFQUFFO1lBRWpCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2hDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sR0FBRyxDQUFDLENBQUM7Z0JBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQy9CO1lBQ0QsT0FBTyxNQUFNLENBQUM7U0FDZjs7WUFFSyxRQUFRLEdBQUcsT0FBTyxHQUFHLFVBQVU7O1lBQy9CLGNBQWMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7O1lBRTdDLE1BQU0sR0FBRyxjQUFjO2FBQzFCLElBQUk7Ozs7O1FBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFLLE9BQUEsbUJBQUEsS0FBSSxDQUFDLFVBQVUsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLG1CQUFBLEtBQUksQ0FBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBekMsQ0FBeUMsRUFBQzthQUN6RCxPQUFPLEVBQUU7O1lBQ04sTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQzs7WUFFbEMsSUFBSSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUksSUFBSSxDQUFDLFNBQVMsVUFBTyxDQUFDO1FBRTNELElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNsQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDYixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ25CO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7Z0JBMUVGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7OztpQ0FKbEM7Q0ErRUMsQUEzRUQsSUEyRUM7U0ExRVksc0JBQXNCOzs7SUFDakMsMkNBQXlCOztJQUN6Qiw0Q0FBb0Q7O0lBQ3BELDBDQUF5Qzs7SUFDekMsNkNBQW9COztJQUNwQiwwQ0FpQkUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEVtb2ppRGF0YSB9IGZyb20gJ0BjdHJsL25neC1lbW9qaS1tYXJ0L25neC1lbW9qaSc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgRW1vamlGcmVxdWVudGx5U2VydmljZSB7XG4gIE5BTUVTUEFDRSA9ICdlbW9qaS1tYXJ0JztcbiAgZnJlcXVlbnRseTogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfSB8IG51bGwgPSBudWxsO1xuICBkZWZhdWx0czogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfSA9IHt9O1xuICBpbml0aWFsaXplZCA9IGZhbHNlO1xuICBERUZBVUxUUyA9IFtcbiAgICAnKzEnLFxuICAgICdncmlubmluZycsXG4gICAgJ2tpc3NpbmdfaGVhcnQnLFxuICAgICdoZWFydF9leWVzJyxcbiAgICAnbGF1Z2hpbmcnLFxuICAgICdzdHVja19vdXRfdG9uZ3VlX3dpbmtpbmdfZXllJyxcbiAgICAnc3dlYXRfc21pbGUnLFxuICAgICdqb3knLFxuICAgICdzY3JlYW0nLFxuICAgICdkaXNhcHBvaW50ZWQnLFxuICAgICd1bmFtdXNlZCcsXG4gICAgJ3dlYXJ5JyxcbiAgICAnc29iJyxcbiAgICAnc3VuZ2xhc3NlcycsXG4gICAgJ2hlYXJ0JyxcbiAgICAncG9vcCcsXG4gIF07XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLmZyZXF1ZW50bHkgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGAke3RoaXMuTkFNRVNQQUNFfS5mcmVxdWVudGx5YCkgfHwgJ251bGwnKTtcbiAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgfVxuICBhZGQoZW1vamk6IEVtb2ppRGF0YSkge1xuICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuICAgIGlmICghdGhpcy5mcmVxdWVudGx5KSB7XG4gICAgICB0aGlzLmZyZXF1ZW50bHkgPSB0aGlzLmRlZmF1bHRzO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuZnJlcXVlbnRseVtlbW9qaS5pZF0pIHtcbiAgICAgIHRoaXMuZnJlcXVlbnRseVtlbW9qaS5pZF0gPSAwO1xuICAgIH1cbiAgICB0aGlzLmZyZXF1ZW50bHlbZW1vamkuaWRdICs9IDE7XG5cbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShgJHt0aGlzLk5BTUVTUEFDRX0ubGFzdGAsIGVtb2ppLmlkKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShgJHt0aGlzLk5BTUVTUEFDRX0uZnJlcXVlbnRseWAsIEpTT04uc3RyaW5naWZ5KHRoaXMuZnJlcXVlbnRseSkpO1xuICB9XG4gIGdldChwZXJMaW5lOiBudW1iZXIsIHRvdGFsTGluZXM6IG51bWJlcikge1xuICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuICAgIGlmICh0aGlzLmZyZXF1ZW50bHkgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuZGVmYXVsdHMgPSB7fTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBlckxpbmU7IGkrKykge1xuICAgICAgICB0aGlzLmRlZmF1bHRzW3RoaXMuREVGQVVMVFNbaV1dID0gcGVyTGluZSAtIGk7XG4gICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuREVGQVVMVFNbaV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBjb25zdCBxdWFudGl0eSA9IHBlckxpbmUgKiB0b3RhbExpbmVzO1xuICAgIGNvbnN0IGZyZXF1ZW50bHlLZXlzID0gT2JqZWN0LmtleXModGhpcy5mcmVxdWVudGx5KTtcblxuICAgIGNvbnN0IHNvcnRlZCA9IGZyZXF1ZW50bHlLZXlzXG4gICAgICAuc29ydCgoYSwgYikgPT4gdGhpcy5mcmVxdWVudGx5IVthXSAtIHRoaXMuZnJlcXVlbnRseSFbYl0pXG4gICAgICAucmV2ZXJzZSgpO1xuICAgIGNvbnN0IHNsaWNlZCA9IHNvcnRlZC5zbGljZSgwLCBxdWFudGl0eSk7XG5cbiAgICBjb25zdCBsYXN0ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oYCR7dGhpcy5OQU1FU1BBQ0V9Lmxhc3RgKTtcblxuICAgIGlmIChsYXN0ICYmICFzbGljZWQuaW5jbHVkZXMobGFzdCkpIHtcbiAgICAgIHNsaWNlZC5wb3AoKTtcbiAgICAgIHNsaWNlZC5wdXNoKGxhc3QpO1xuICAgIH1cbiAgICByZXR1cm4gc2xpY2VkO1xuICB9XG59XG4iXX0=