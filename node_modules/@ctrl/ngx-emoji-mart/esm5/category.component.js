/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { EmojiService } from '@ctrl/ngx-emoji-mart/ngx-emoji';
import { EmojiFrequentlyService } from './emoji-frequently.service';
var CategoryComponent = /** @class */ (function () {
    function CategoryComponent(ref, emojiService, frequently) {
        this.ref = ref;
        this.emojiService = emojiService;
        this.frequently = frequently;
        this.hasStickyPosition = true;
        this.name = '';
        this.perLine = 9;
        this.totalFrequentLines = 4;
        this.recent = [];
        this.custom = [];
        this.hideObsolete = true;
        this.emojiOver = new EventEmitter();
        this.emojiLeave = new EventEmitter();
        this.emojiClick = new EventEmitter();
        this.containerStyles = {};
        this.labelStyles = {};
        this.labelSpanStyles = {};
        this.margin = 0;
        this.minMargin = 0;
        this.maxMargin = 0;
        this.top = 0;
    }
    /**
     * @return {?}
     */
    CategoryComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.emojis = this.getEmojis();
        if (!this.emojis) {
            this.containerStyles = { display: 'none' };
        }
        if (!this.hasStickyPosition) {
            this.labelStyles = { height: 28 };
            this.labelSpanStyles = { position: 'absolute' };
        }
    };
    /**
     * @return {?}
     */
    CategoryComponent.prototype.memoizeSize = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var parent = this.container.nativeElement.parentNode.parentNode;
        var _a = this.container.nativeElement.getBoundingClientRect(), top = _a.top, height = _a.height;
        /** @type {?} */
        var parentTop = parent.getBoundingClientRect().top;
        /** @type {?} */
        var labelHeight = this.label.nativeElement.getBoundingClientRect().height;
        this.top = top - parentTop + parent.scrollTop;
        if (height === 0) {
            this.maxMargin = 0;
        }
        else {
            this.maxMargin = height - labelHeight;
        }
    };
    /**
     * @param {?} scrollTop
     * @return {?}
     */
    CategoryComponent.prototype.handleScroll = /**
     * @param {?} scrollTop
     * @return {?}
     */
    function (scrollTop) {
        /** @type {?} */
        var margin = scrollTop - this.top;
        margin = margin < this.minMargin ? this.minMargin : margin;
        margin = margin > this.maxMargin ? this.maxMargin : margin;
        if (margin === this.margin) {
            return false;
        }
        if (!this.hasStickyPosition) {
            this.label.nativeElement.style.top = margin + "px";
        }
        this.margin = margin;
        return true;
    };
    /**
     * @return {?}
     */
    CategoryComponent.prototype.getEmojis = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.name === 'Recent') {
            /** @type {?} */
            var frequentlyUsed = this.recent || this.frequently.get(this.perLine, this.totalFrequentLines);
            if (!frequentlyUsed || !frequentlyUsed.length) {
                frequentlyUsed = this.frequently.get(this.perLine, this.totalFrequentLines);
            }
            if (frequentlyUsed.length) {
                this.emojis = frequentlyUsed
                    .map((/**
                 * @param {?} id
                 * @return {?}
                 */
                function (id) {
                    /** @type {?} */
                    var emoji = _this.custom.filter((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) { return e.id === id; }))[0];
                    if (emoji) {
                        return emoji;
                    }
                    return id;
                }))
                    .filter((/**
                 * @param {?} id
                 * @return {?}
                 */
                function (id) { return !!_this.emojiService.getData(id); }));
            }
            if ((!this.emojis || this.emojis.length === 0) && frequentlyUsed.length > 0) {
                return null;
            }
        }
        if (this.emojis) {
            this.emojis = this.emojis.slice(0);
        }
        return this.emojis;
    };
    /**
     * @param {?} display
     * @return {?}
     */
    CategoryComponent.prototype.updateDisplay = /**
     * @param {?} display
     * @return {?}
     */
    function (display) {
        this.containerStyles.display = display;
        this.getEmojis();
        this.ref.detectChanges();
    };
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    CategoryComponent.prototype.trackById = /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    function (index, item) {
        return item;
    };
    CategoryComponent.decorators = [
        { type: Component, args: [{
                    selector: 'emoji-category',
                    template: "\n  <div #container class=\"emoji-mart-category\"\n    [class.emoji-mart-no-results]=\"emojis && !emojis.length\"\n    [ngStyle]=\"containerStyles\">\n    <div class=\"emoji-mart-category-label\"\n      [ngStyle]=\"labelStyles\"\n      [attr.data-name]=\"name\">\n      <span style=\"labelSpanStyles\" #label>\n        {{ i18n.categories[id] }}\n      </span>\n    </div>\n\n    <ng-template [ngIf]=\"emojis\">\n      <ngx-emoji\n        *ngFor=\"let emoji of emojis; trackBy: trackById\"\n        [emoji]=\"emoji\"\n        [size]=\"emojiSize\"\n        [skin]=\"emojiSkin\"\n        [isNative]=\"emojiIsNative\"\n        [set]=\"emojiSet\"\n        [sheetSize]=\"emojiSheetSize\"\n        [forceSize]=\"emojiForceSize\"\n        [tooltip]=\"emojiTooltip\"\n        [backgroundImageFn]=\"emojiBackgroundImageFn\"\n        [hideObsolete]=\"hideObsolete\"\n        (emojiOver)=\"emojiOver.emit($event)\"\n        (emojiLeave)=\"emojiLeave.emit($event)\"\n        (emojiClick)=\"emojiClick.emit($event)\"\n      ></ngx-emoji>\n    </ng-template>\n\n    <div *ngIf=\"emojis && !emojis.length\">\n      <div>\n        <ngx-emoji\n          [emoji]=\"notFoundEmoji\"\n          size=\"38\"\n          [skin]=\"emojiSkin\"\n          [isNative]=\"emojiIsNative\"\n          [set]=\"emojiSet\"\n          [sheetSize]=\"emojiSheetSize\"\n          [forceSize]=\"emojiForceSize\"\n          [tooltip]=\"emojiTooltip\"\n          [backgroundImageFn]=\"emojiBackgroundImageFn\"\n        ></ngx-emoji>\n      </div>\n\n      <div class=\"emoji-mart-no-results-label\">\n        {{ i18n.notfound }}\n      </div>\n    </div>\n\n  </div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false
                }] }
    ];
    /** @nocollapse */
    CategoryComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: EmojiService },
        { type: EmojiFrequentlyService }
    ]; };
    CategoryComponent.propDecorators = {
        emojis: [{ type: Input }],
        hasStickyPosition: [{ type: Input }],
        name: [{ type: Input }],
        perLine: [{ type: Input }],
        totalFrequentLines: [{ type: Input }],
        recent: [{ type: Input }],
        custom: [{ type: Input }],
        i18n: [{ type: Input }],
        id: [{ type: Input }],
        hideObsolete: [{ type: Input }],
        notFoundEmoji: [{ type: Input }],
        emojiIsNative: [{ type: Input }],
        emojiSkin: [{ type: Input }],
        emojiSize: [{ type: Input }],
        emojiSet: [{ type: Input }],
        emojiSheetSize: [{ type: Input }],
        emojiForceSize: [{ type: Input }],
        emojiTooltip: [{ type: Input }],
        emojiBackgroundImageFn: [{ type: Input }],
        emojiOver: [{ type: Output }],
        emojiLeave: [{ type: Output }],
        emojiClick: [{ type: Output }],
        container: [{ type: ViewChild, args: ['container',] }],
        label: [{ type: ViewChild, args: ['label',] }]
    };
    return CategoryComponent;
}());
export { CategoryComponent };
if (false) {
    /** @type {?} */
    CategoryComponent.prototype.emojis;
    /** @type {?} */
    CategoryComponent.prototype.hasStickyPosition;
    /** @type {?} */
    CategoryComponent.prototype.name;
    /** @type {?} */
    CategoryComponent.prototype.perLine;
    /** @type {?} */
    CategoryComponent.prototype.totalFrequentLines;
    /** @type {?} */
    CategoryComponent.prototype.recent;
    /** @type {?} */
    CategoryComponent.prototype.custom;
    /** @type {?} */
    CategoryComponent.prototype.i18n;
    /** @type {?} */
    CategoryComponent.prototype.id;
    /** @type {?} */
    CategoryComponent.prototype.hideObsolete;
    /** @type {?} */
    CategoryComponent.prototype.notFoundEmoji;
    /** @type {?} */
    CategoryComponent.prototype.emojiIsNative;
    /** @type {?} */
    CategoryComponent.prototype.emojiSkin;
    /** @type {?} */
    CategoryComponent.prototype.emojiSize;
    /** @type {?} */
    CategoryComponent.prototype.emojiSet;
    /** @type {?} */
    CategoryComponent.prototype.emojiSheetSize;
    /** @type {?} */
    CategoryComponent.prototype.emojiForceSize;
    /** @type {?} */
    CategoryComponent.prototype.emojiTooltip;
    /** @type {?} */
    CategoryComponent.prototype.emojiBackgroundImageFn;
    /** @type {?} */
    CategoryComponent.prototype.emojiOver;
    /** @type {?} */
    CategoryComponent.prototype.emojiLeave;
    /** @type {?} */
    CategoryComponent.prototype.emojiClick;
    /** @type {?} */
    CategoryComponent.prototype.container;
    /** @type {?} */
    CategoryComponent.prototype.label;
    /** @type {?} */
    CategoryComponent.prototype.containerStyles;
    /** @type {?} */
    CategoryComponent.prototype.labelStyles;
    /** @type {?} */
    CategoryComponent.prototype.labelSpanStyles;
    /** @type {?} */
    CategoryComponent.prototype.margin;
    /** @type {?} */
    CategoryComponent.prototype.minMargin;
    /** @type {?} */
    CategoryComponent.prototype.maxMargin;
    /** @type {?} */
    CategoryComponent.prototype.top;
    /** @type {?} */
    CategoryComponent.prototype.ref;
    /**
     * @type {?}
     * @private
     */
    CategoryComponent.prototype.emojiService;
    /**
     * @type {?}
     * @private
     */
    CategoryComponent.prototype.frequently;
}
//# sourceMappingURL=data:application/json;base64,