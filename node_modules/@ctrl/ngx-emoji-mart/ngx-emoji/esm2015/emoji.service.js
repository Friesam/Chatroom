/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { emojis } from './data/emojis';
import * as i0 from "@angular/core";
/** @type {?} */
const COLONS_REGEX = /^(?:\:([^\:]+)\:)(?:\:skin-tone-(\d)\:)?$/;
/** @type {?} */
const SKINS = ['1F3FA', '1F3FB', '1F3FC', '1F3FD', '1F3FE', '1F3FF'];
/** @type {?} */
export const DEFAULT_BACKGROUNDFN = (/**
 * @param {?} set
 * @param {?} sheetSize
 * @return {?}
 */
(set, sheetSize) => `https://unpkg.com/emoji-datasource-${set}@4.0.4/img/${set}/sheets-256/${sheetSize}.png`);
export class EmojiService {
    constructor() {
        this.uncompressed = false;
        this.names = {};
        this.emojis = [];
        if (!this.uncompressed) {
            this.uncompress(emojis);
            this.uncompressed = true;
        }
    }
    /**
     * @param {?} list
     * @return {?}
     */
    uncompress(list) {
        this.emojis = list.map((/**
         * @param {?} emoji
         * @return {?}
         */
        emoji => {
            /** @type {?} */
            const data = Object.assign({}, emoji);
            if (!data.shortNames) {
                data.shortNames = [];
            }
            data.shortNames.unshift(data.shortName);
            data.id = data.shortName;
            data.native = this.unifiedToNative(data.unified);
            if (!data.skinVariations) {
                data.skinVariations = [];
            }
            if (!data.keywords) {
                data.keywords = [];
            }
            if (!data.emoticons) {
                data.emoticons = [];
            }
            if (!data.hidden) {
                data.hidden = [];
            }
            if (!data.text) {
                data.text = '';
            }
            if (data.obsoletes) {
                // get keywords from emoji that it obsoletes since that is shared
                /** @type {?} */
                const f = list.find((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.unified === data.obsoletes));
                if (f) {
                    if (f.keywords) {
                        data.keywords = [...data.keywords, ...f.keywords, f.shortName];
                    }
                    else {
                        data.keywords = [...data.keywords, f.shortName];
                    }
                }
            }
            this.names[data.unified] = data;
            for (const n of data.shortNames) {
                this.names[n] = data;
            }
            return data;
        }));
    }
    /**
     * @param {?} emoji
     * @param {?=} skin
     * @param {?=} set
     * @return {?}
     */
    getData(emoji, skin, set) {
        /** @type {?} */
        let emojiData;
        if (typeof emoji === 'string') {
            /** @type {?} */
            const matches = emoji.match(COLONS_REGEX);
            if (matches) {
                emoji = matches[1];
                if (matches[2]) {
                    skin = (/** @type {?} */ (parseInt(matches[2], 10)));
                }
            }
            if (this.names.hasOwnProperty(emoji)) {
                emojiData = this.names[emoji];
            }
            else {
                return null;
            }
        }
        else if (emoji.id) {
            emojiData = this.names[emoji.id];
        }
        else if (emoji.unified) {
            emojiData = this.names[emoji.unified.toUpperCase()];
        }
        if (!emojiData) {
            emojiData = emoji;
            emojiData.custom = true;
        }
        /** @type {?} */
        const hasSkinVariations = emojiData.skinVariations && emojiData.skinVariations.length;
        if (hasSkinVariations && skin && skin > 1 && set) {
            emojiData = Object.assign({}, emojiData);
            /** @type {?} */
            const skinKey = SKINS[skin - 1];
            /** @type {?} */
            const variationData = emojiData.skinVariations.find((/**
             * @param {?} n
             * @return {?}
             */
            (n) => n.unified.includes(skinKey)));
            if (!variationData.hidden || !variationData.hidden.includes(set)) {
                emojiData.skinTone = skin;
                emojiData = Object.assign({}, emojiData, variationData);
            }
            emojiData.native = this.unifiedToNative(emojiData.unified);
        }
        emojiData.set = set || '';
        return (/** @type {?} */ (emojiData));
    }
    /**
     * @param {?} unified
     * @return {?}
     */
    unifiedToNative(unified) {
        /** @type {?} */
        const codePoints = unified.split('-').map((/**
         * @param {?} u
         * @return {?}
         */
        u => parseInt(`0x${u}`, 16)));
        return String.fromCodePoint(...codePoints);
    }
    /**
     * @param {?} sheet
     * @param {?=} set
     * @param {?=} size
     * @param {?=} sheetSize
     * @param {?=} backgroundImageFn
     * @param {?=} sheetColumns
     * @return {?}
     */
    emojiSpriteStyles(sheet, set = 'apple', size = 24, sheetSize = 64, backgroundImageFn = DEFAULT_BACKGROUNDFN, sheetColumns = 52) {
        return {
            width: `${size}px`,
            height: `${size}px`,
            display: 'inline-block',
            'background-image': `url(${backgroundImageFn(set, sheetSize)})`,
            'background-size': `${100 * sheetColumns}%`,
            'background-position': this.getSpritePosition(sheet, sheetColumns),
        };
    }
    /**
     * @param {?} sheet
     * @param {?} sheetColumns
     * @return {?}
     */
    getSpritePosition(sheet, sheetColumns) {
        const [sheet_x, sheet_y] = sheet;
        /** @type {?} */
        const multiply = 100 / (sheetColumns - 1);
        return `${multiply * sheet_x}% ${multiply * sheet_y}%`;
    }
    /**
     * @param {?} emoji
     * @return {?}
     */
    sanitize(emoji) {
        if (emoji === null) {
            return null;
        }
        /** @type {?} */
        const id = emoji.id || emoji.shortNames[0];
        /** @type {?} */
        let colons = `:${id}:`;
        if (emoji.skinTone) {
            colons += `:skin-tone-${emoji.skinTone}:`;
        }
        emoji.colons = colons;
        return Object.assign({}, emoji);
    }
    /**
     * @param {?} emoji
     * @param {?=} skin
     * @param {?=} set
     * @return {?}
     */
    getSanitizedData(emoji, skin, set) {
        return this.sanitize(this.getData(emoji, skin, set));
    }
}
EmojiService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
EmojiService.ctorParameters = () => [];
/** @nocollapse */ EmojiService.ngInjectableDef = i0.defineInjectable({ factory: function EmojiService_Factory() { return new EmojiService(); }, token: EmojiService, providedIn: "root" });
if (false) {
    /** @type {?} */
    EmojiService.prototype.uncompressed;
    /** @type {?} */
    EmojiService.prototype.names;
    /** @type {?} */
    EmojiService.prototype.emojis;
}
//# sourceMappingURL=data:application/json;base64,