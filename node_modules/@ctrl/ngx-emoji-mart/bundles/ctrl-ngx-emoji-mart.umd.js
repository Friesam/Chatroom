(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/forms'), require('@ctrl/ngx-emoji-mart/ngx-emoji'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@ctrl/ngx-emoji-mart', ['exports', '@angular/common', '@angular/forms', '@ctrl/ngx-emoji-mart/ngx-emoji', '@angular/core'], factory) :
    (factory((global.ctrl = global.ctrl || {}, global.ctrl['ngx-emoji-mart'] = {}),global.ng.common,global.ng.forms,global['@ctrl/ngx-emoji-mart/ngx-emoji'],global.ng.core));
}(this, (function (exports,common,forms,i1,i0) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AnchorsComponent = /** @class */ (function () {
        function AnchorsComponent() {
            this.categories = [];
            this.icons = {};
            this.anchorClick = new i0.EventEmitter();
        }
        /**
         * @param {?} idx
         * @param {?} cat
         * @return {?}
         */
        AnchorsComponent.prototype.trackByFn = /**
         * @param {?} idx
         * @param {?} cat
         * @return {?}
         */
            function (idx, cat) {
                return cat.id;
            };
        /**
         * @param {?} $event
         * @param {?} index
         * @return {?}
         */
        AnchorsComponent.prototype.handleClick = /**
         * @param {?} $event
         * @param {?} index
         * @return {?}
         */
            function ($event, index) {
                this.anchorClick.emit({
                    category: this.categories[index],
                    index: index,
                });
            };
        AnchorsComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'emoji-mart-anchors',
                        template: "\n  <div class=\"emoji-mart-anchors\">\n    <ng-template ngFor let-category [ngForOf]=\"categories\" let-idx=\"index\" [ngForTrackBy]=\"trackByFn\">\n      <span\n        *ngIf=\"category.anchor !== false\"\n        [attr.title]=\"i18n.categories[category.id]\"\n        (click)=\"this.handleClick($event, idx)\"\n        class=\"emoji-mart-anchor\"\n        [class.emoji-mart-anchor-selected]=\"category.name === selected\"\n        [style.color]=\"category.name === selected ? color : null\"\n      >\n        <div>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n            <path [attr.d]=\"icons[category.id]\" />\n          </svg>\n        </div>\n        <span class=\"emoji-mart-anchor-bar\" [style.background-color]=\"color\"></span>\n      </span>\n    </ng-template>\n  </div>\n  ",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    }] }
        ];
        AnchorsComponent.propDecorators = {
            categories: [{ type: i0.Input }],
            color: [{ type: i0.Input }],
            selected: [{ type: i0.Input }],
            i18n: [{ type: i0.Input }],
            icons: [{ type: i0.Input }],
            anchorClick: [{ type: i0.Output }]
        };
        return AnchorsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EmojiFrequentlyService = /** @class */ (function () {
        function EmojiFrequentlyService() {
            this.NAMESPACE = 'emoji-mart';
            this.frequently = null;
            this.defaults = {};
            this.initialized = false;
            this.DEFAULTS = [
                '+1',
                'grinning',
                'kissing_heart',
                'heart_eyes',
                'laughing',
                'stuck_out_tongue_winking_eye',
                'sweat_smile',
                'joy',
                'scream',
                'disappointed',
                'unamused',
                'weary',
                'sob',
                'sunglasses',
                'heart',
                'poop',
            ];
        }
        /**
         * @return {?}
         */
        EmojiFrequentlyService.prototype.init = /**
         * @return {?}
         */
            function () {
                this.frequently = JSON.parse(localStorage.getItem(this.NAMESPACE + ".frequently") || 'null');
                this.initialized = true;
            };
        /**
         * @param {?} emoji
         * @return {?}
         */
        EmojiFrequentlyService.prototype.add = /**
         * @param {?} emoji
         * @return {?}
         */
            function (emoji) {
                if (!this.initialized) {
                    this.init();
                }
                if (!this.frequently) {
                    this.frequently = this.defaults;
                }
                if (!this.frequently[emoji.id]) {
                    this.frequently[emoji.id] = 0;
                }
                this.frequently[emoji.id] += 1;
                localStorage.setItem(this.NAMESPACE + ".last", emoji.id);
                localStorage.setItem(this.NAMESPACE + ".frequently", JSON.stringify(this.frequently));
            };
        /**
         * @param {?} perLine
         * @param {?} totalLines
         * @return {?}
         */
        EmojiFrequentlyService.prototype.get = /**
         * @param {?} perLine
         * @param {?} totalLines
         * @return {?}
         */
            function (perLine, totalLines) {
                var _this = this;
                if (!this.initialized) {
                    this.init();
                }
                if (this.frequently === null) {
                    this.defaults = {};
                    /** @type {?} */
                    var result = [];
                    for (var i = 0; i < perLine; i++) {
                        this.defaults[this.DEFAULTS[i]] = perLine - i;
                        result.push(this.DEFAULTS[i]);
                    }
                    return result;
                }
                /** @type {?} */
                var quantity = perLine * totalLines;
                /** @type {?} */
                var frequentlyKeys = Object.keys(this.frequently);
                /** @type {?} */
                var sorted = frequentlyKeys
                    .sort(( /**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */function (a, b) { return ( /** @type {?} */(_this.frequently))[a] - ( /** @type {?} */(_this.frequently))[b]; }))
                    .reverse();
                /** @type {?} */
                var sliced = sorted.slice(0, quantity);
                /** @type {?} */
                var last = localStorage.getItem(this.NAMESPACE + ".last");
                if (last && !sliced.includes(last)) {
                    sliced.pop();
                    sliced.push(last);
                }
                return sliced;
            };
        EmojiFrequentlyService.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */ EmojiFrequentlyService.ngInjectableDef = i0.defineInjectable({ factory: function EmojiFrequentlyService_Factory() { return new EmojiFrequentlyService(); }, token: EmojiFrequentlyService, providedIn: "root" });
        return EmojiFrequentlyService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CategoryComponent = /** @class */ (function () {
        function CategoryComponent(ref, emojiService, frequently) {
            this.ref = ref;
            this.emojiService = emojiService;
            this.frequently = frequently;
            this.hasStickyPosition = true;
            this.name = '';
            this.perLine = 9;
            this.totalFrequentLines = 4;
            this.recent = [];
            this.custom = [];
            this.hideObsolete = true;
            this.emojiOver = new i0.EventEmitter();
            this.emojiLeave = new i0.EventEmitter();
            this.emojiClick = new i0.EventEmitter();
            this.containerStyles = {};
            this.labelStyles = {};
            this.labelSpanStyles = {};
            this.margin = 0;
            this.minMargin = 0;
            this.maxMargin = 0;
            this.top = 0;
        }
        /**
         * @return {?}
         */
        CategoryComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.emojis = this.getEmojis();
                if (!this.emojis) {
                    this.containerStyles = { display: 'none' };
                }
                if (!this.hasStickyPosition) {
                    this.labelStyles = { height: 28 };
                    this.labelSpanStyles = { position: 'absolute' };
                }
            };
        /**
         * @return {?}
         */
        CategoryComponent.prototype.memoizeSize = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var parent = this.container.nativeElement.parentNode.parentNode;
                var _a = this.container.nativeElement.getBoundingClientRect(), top = _a.top, height = _a.height;
                /** @type {?} */
                var parentTop = parent.getBoundingClientRect().top;
                /** @type {?} */
                var labelHeight = this.label.nativeElement.getBoundingClientRect().height;
                this.top = top - parentTop + parent.scrollTop;
                if (height === 0) {
                    this.maxMargin = 0;
                }
                else {
                    this.maxMargin = height - labelHeight;
                }
            };
        /**
         * @param {?} scrollTop
         * @return {?}
         */
        CategoryComponent.prototype.handleScroll = /**
         * @param {?} scrollTop
         * @return {?}
         */
            function (scrollTop) {
                /** @type {?} */
                var margin = scrollTop - this.top;
                margin = margin < this.minMargin ? this.minMargin : margin;
                margin = margin > this.maxMargin ? this.maxMargin : margin;
                if (margin === this.margin) {
                    return false;
                }
                if (!this.hasStickyPosition) {
                    this.label.nativeElement.style.top = margin + "px";
                }
                this.margin = margin;
                return true;
            };
        /**
         * @return {?}
         */
        CategoryComponent.prototype.getEmojis = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.name === 'Recent') {
                    /** @type {?} */
                    var frequentlyUsed = this.recent || this.frequently.get(this.perLine, this.totalFrequentLines);
                    if (!frequentlyUsed || !frequentlyUsed.length) {
                        frequentlyUsed = this.frequently.get(this.perLine, this.totalFrequentLines);
                    }
                    if (frequentlyUsed.length) {
                        this.emojis = frequentlyUsed
                            .map(( /**
                     * @param {?} id
                     * @return {?}
                     */function (id) {
                            /** @type {?} */
                            var emoji = _this.custom.filter(( /**
                             * @param {?} e
                             * @return {?}
                             */function (e) { return e.id === id; }))[0];
                            if (emoji) {
                                return emoji;
                            }
                            return id;
                        }))
                            .filter(( /**
                     * @param {?} id
                     * @return {?}
                     */function (id) { return !!_this.emojiService.getData(id); }));
                    }
                    if ((!this.emojis || this.emojis.length === 0) && frequentlyUsed.length > 0) {
                        return null;
                    }
                }
                if (this.emojis) {
                    this.emojis = this.emojis.slice(0);
                }
                return this.emojis;
            };
        /**
         * @param {?} display
         * @return {?}
         */
        CategoryComponent.prototype.updateDisplay = /**
         * @param {?} display
         * @return {?}
         */
            function (display) {
                this.containerStyles.display = display;
                this.getEmojis();
                this.ref.detectChanges();
            };
        /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
        CategoryComponent.prototype.trackById = /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
            function (index, item) {
                return item;
            };
        CategoryComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'emoji-category',
                        template: "\n  <div #container class=\"emoji-mart-category\"\n    [class.emoji-mart-no-results]=\"emojis && !emojis.length\"\n    [ngStyle]=\"containerStyles\">\n    <div class=\"emoji-mart-category-label\"\n      [ngStyle]=\"labelStyles\"\n      [attr.data-name]=\"name\">\n      <span style=\"labelSpanStyles\" #label>\n        {{ i18n.categories[id] }}\n      </span>\n    </div>\n\n    <ng-template [ngIf]=\"emojis\">\n      <ngx-emoji\n        *ngFor=\"let emoji of emojis; trackBy: trackById\"\n        [emoji]=\"emoji\"\n        [size]=\"emojiSize\"\n        [skin]=\"emojiSkin\"\n        [isNative]=\"emojiIsNative\"\n        [set]=\"emojiSet\"\n        [sheetSize]=\"emojiSheetSize\"\n        [forceSize]=\"emojiForceSize\"\n        [tooltip]=\"emojiTooltip\"\n        [backgroundImageFn]=\"emojiBackgroundImageFn\"\n        [hideObsolete]=\"hideObsolete\"\n        (emojiOver)=\"emojiOver.emit($event)\"\n        (emojiLeave)=\"emojiLeave.emit($event)\"\n        (emojiClick)=\"emojiClick.emit($event)\"\n      ></ngx-emoji>\n    </ng-template>\n\n    <div *ngIf=\"emojis && !emojis.length\">\n      <div>\n        <ngx-emoji\n          [emoji]=\"notFoundEmoji\"\n          size=\"38\"\n          [skin]=\"emojiSkin\"\n          [isNative]=\"emojiIsNative\"\n          [set]=\"emojiSet\"\n          [sheetSize]=\"emojiSheetSize\"\n          [forceSize]=\"emojiForceSize\"\n          [tooltip]=\"emojiTooltip\"\n          [backgroundImageFn]=\"emojiBackgroundImageFn\"\n        ></ngx-emoji>\n      </div>\n\n      <div class=\"emoji-mart-no-results-label\">\n        {{ i18n.notfound }}\n      </div>\n    </div>\n\n  </div>\n  ",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    }] }
        ];
        /** @nocollapse */
        CategoryComponent.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef },
                { type: i1.EmojiService },
                { type: EmojiFrequentlyService }
            ];
        };
        CategoryComponent.propDecorators = {
            emojis: [{ type: i0.Input }],
            hasStickyPosition: [{ type: i0.Input }],
            name: [{ type: i0.Input }],
            perLine: [{ type: i0.Input }],
            totalFrequentLines: [{ type: i0.Input }],
            recent: [{ type: i0.Input }],
            custom: [{ type: i0.Input }],
            i18n: [{ type: i0.Input }],
            id: [{ type: i0.Input }],
            hideObsolete: [{ type: i0.Input }],
            notFoundEmoji: [{ type: i0.Input }],
            emojiIsNative: [{ type: i0.Input }],
            emojiSkin: [{ type: i0.Input }],
            emojiSize: [{ type: i0.Input }],
            emojiSet: [{ type: i0.Input }],
            emojiSheetSize: [{ type: i0.Input }],
            emojiForceSize: [{ type: i0.Input }],
            emojiTooltip: [{ type: i0.Input }],
            emojiBackgroundImageFn: [{ type: i0.Input }],
            emojiOver: [{ type: i0.Output }],
            emojiLeave: [{ type: i0.Output }],
            emojiClick: [{ type: i0.Output }],
            container: [{ type: i0.ViewChild, args: ['container',] }],
            label: [{ type: i0.ViewChild, args: ['label',] }]
        };
        return CategoryComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} arr
     * @return {?}
     */
    function uniq(arr) {
        return arr.reduce(( /**
         * @param {?} acc
         * @param {?} item
         * @return {?}
         */function (acc, item) {
            if (!acc.includes(item)) {
                acc.push(item);
            }
            return acc;
        }), []);
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function intersect(a, b) {
        /** @type {?} */
        var uniqA = uniq(a);
        /** @type {?} */
        var uniqB = uniq(b);
        return uniqA.filter(( /**
         * @param {?} item
         * @return {?}
         */function (item) { return uniqB.indexOf(item) >= 0; }));
    }
    // https://github.com/sonicdoe/measure-scrollbar
    /**
     * @return {?}
     */
    function measureScrollbar() {
        if (typeof document === 'undefined') {
            return 0;
        }
        /** @type {?} */
        var div = document.createElement('div');
        div.style.width = '100px';
        div.style.height = '100px';
        div.style.overflow = 'scroll';
        div.style.position = 'absolute';
        div.style.top = '-9999px';
        document.body.appendChild(div);
        /** @type {?} */
        var scrollbarWidth = div.offsetWidth - div.clientWidth;
        document.body.removeChild(div);
        return scrollbarWidth;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EmojiSearch = /** @class */ (function () {
        function EmojiSearch(emojiService) {
            var e_1, _a;
            var _this = this;
            this.emojiService = emojiService;
            this.originalPool = {};
            this.index = {};
            this.emojisList = {};
            this.emoticonsList = {};
            this.emojiSearch = {};
            var _loop_1 = function (emojiData) {
                var shortNames = emojiData.shortNames, emoticons = emojiData.emoticons;
                /** @type {?} */
                var id = shortNames[0];
                emoticons.forEach(( /**
                 * @param {?} emoticon
                 * @return {?}
                 */function (emoticon) {
                    if (_this.emoticonsList[emoticon]) {
                        return;
                    }
                    _this.emoticonsList[emoticon] = id;
                }));
                this_1.emojisList[id] = this_1.emojiService.getSanitizedData(id);
                this_1.originalPool[id] = emojiData;
            };
            var this_1 = this;
            try {
                for (var _b = __values(this.emojiService.emojis), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var emojiData = _c.value;
                    _loop_1(emojiData);
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
        }
        /**
         * @param {?} custom
         * @param {?} pool
         * @return {?}
         */
        EmojiSearch.prototype.addCustomToPool = /**
         * @param {?} custom
         * @param {?} pool
         * @return {?}
         */
            function (custom, pool) {
                var _this = this;
                custom.forEach(( /**
                 * @param {?} emoji
                 * @return {?}
                 */function (emoji) {
                    /** @type {?} */
                    var emojiId = emoji.id || emoji.shortNames[0];
                    if (emojiId && !pool[emojiId]) {
                        pool[emojiId] = _this.emojiService.getData(emoji);
                        _this.emojisList[emojiId] = _this.emojiService.getSanitizedData(emoji);
                    }
                }));
            };
        /**
         * @param {?} value
         * @param {?=} emojisToShowFilter
         * @param {?=} maxResults
         * @param {?=} include
         * @param {?=} exclude
         * @param {?=} custom
         * @return {?}
         */
        EmojiSearch.prototype.search = /**
         * @param {?} value
         * @param {?=} emojisToShowFilter
         * @param {?=} maxResults
         * @param {?=} include
         * @param {?=} exclude
         * @param {?=} custom
         * @return {?}
         */
            function (value, emojisToShowFilter, maxResults, include, exclude, custom) {
                var _this = this;
                if (maxResults === void 0) {
                    maxResults = 75;
                }
                if (include === void 0) {
                    include = [];
                }
                if (exclude === void 0) {
                    exclude = [];
                }
                if (custom === void 0) {
                    custom = [];
                }
                this.addCustomToPool(custom, this.originalPool);
                /** @type {?} */
                var results;
                /** @type {?} */
                var pool = this.originalPool;
                if (value.length) {
                    if (value === '-' || value === '-1') {
                        return [this.emojisList['-1']];
                    }
                    /** @type {?} */
                    var values = value.toLowerCase().split(/[\s|,|\-|_]+/);
                    /** @type {?} */
                    var allResults = [];
                    if (values.length > 2) {
                        values = [values[0], values[1]];
                    }
                    if (include.length || exclude.length) {
                        pool = {};
                        i1.categories.forEach(( /**
                         * @param {?} category
                         * @return {?}
                         */function (category) {
                            /** @type {?} */
                            var isIncluded = include && include.length
                                ? include.indexOf(category.id) > -1
                                : true;
                            /** @type {?} */
                            var isExcluded = exclude && exclude.length
                                ? exclude.indexOf(category.id) > -1
                                : false;
                            if (!isIncluded || isExcluded) {
                                return;
                            }
                            ( /** @type {?} */(category.emojis)).forEach(( /**
                             * @param {?} emojiId
                             * @return {?}
                             */function (emojiId) { return (pool[emojiId] = _this.emojiService.names[emojiId]); }));
                        }));
                        if (custom.length) {
                            /** @type {?} */
                            var customIsIncluded = include && include.length ? include.indexOf('custom') > -1 : true;
                            /** @type {?} */
                            var customIsExcluded = exclude && exclude.length ? exclude.indexOf('custom') > -1 : false;
                            if (customIsIncluded && !customIsExcluded) {
                                this.addCustomToPool(custom, pool);
                            }
                        }
                    }
                    allResults = values
                        .map(( /**
                 * @param {?} v
                 * @return {?}
                 */function (v) {
                        /** @type {?} */
                        var aPool = pool;
                        /** @type {?} */
                        var aIndex = _this.index;
                        /** @type {?} */
                        var length = 0;
                        var _loop_2 = function (charIndex) {
                            var e_2, _a;
                            /** @type {?} */
                            var char = v[charIndex];
                            length++;
                            if (!aIndex[char]) {
                                aIndex[char] = {};
                            }
                            aIndex = aIndex[char];
                            if (!aIndex.results) {
                                /** @type {?} */
                                var scores_1 = {};
                                aIndex.results = [];
                                aIndex.pool = {};
                                try {
                                    for (var _b = __values(Object.keys(aPool)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                        var id = _c.value;
                                        /** @type {?} */
                                        var emoji = aPool[id];
                                        if (!_this.emojiSearch[id]) {
                                            _this.emojiSearch[id] = _this.buildSearch(emoji.short_names, emoji.name, emoji.keywords, emoji.emoticons);
                                        }
                                        /** @type {?} */
                                        var query = _this.emojiSearch[id];
                                        /** @type {?} */
                                        var sub = v.substr(0, length);
                                        /** @type {?} */
                                        var subIndex = query.indexOf(sub);
                                        if (subIndex !== -1) {
                                            /** @type {?} */
                                            var score = subIndex + 1;
                                            if (sub === id) {
                                                score = 0;
                                            }
                                            aIndex.results.push(_this.emojisList[id]);
                                            aIndex.pool[id] = emoji;
                                            scores_1[id] = score;
                                        }
                                    }
                                }
                                catch (e_2_1) {
                                    e_2 = { error: e_2_1 };
                                }
                                finally {
                                    try {
                                        if (_c && !_c.done && (_a = _b.return))
                                            _a.call(_b);
                                    }
                                    finally {
                                        if (e_2)
                                            throw e_2.error;
                                    }
                                }
                                aIndex.results.sort(( /**
                                 * @param {?} a
                                 * @param {?} b
                                 * @return {?}
                                 */function (a, b) {
                                    /** @type {?} */
                                    var aScore = scores_1[a.id];
                                    /** @type {?} */
                                    var bScore = scores_1[b.id];
                                    return aScore - bScore;
                                }));
                            }
                            aPool = aIndex.pool;
                        };
                        for (var charIndex = 0; charIndex < v.length; charIndex++) {
                            _loop_2(charIndex);
                        }
                        return aIndex.results;
                    }))
                        .filter(( /**
                 * @param {?} a
                 * @return {?}
                 */function (a) { return a; }));
                    if (allResults.length > 1) {
                        results = intersect.apply(null, ( /** @type {?} */(allResults)));
                    }
                    else if (allResults.length) {
                        results = allResults[0];
                    }
                    else {
                        results = [];
                    }
                }
                if (results) {
                    if (emojisToShowFilter) {
                        results = results.filter(( /**
                         * @param {?} result
                         * @return {?}
                         */function (result) {
                            return emojisToShowFilter(_this.emojiService.names[result.id]);
                        }));
                    }
                    if (results && results.length > maxResults) {
                        results = results.slice(0, maxResults);
                    }
                }
                return results || null;
            };
        /**
         * @param {?} short_names
         * @param {?} name
         * @param {?} keywords
         * @param {?} emoticons
         * @return {?}
         */
        EmojiSearch.prototype.buildSearch = /**
         * @param {?} short_names
         * @param {?} name
         * @param {?} keywords
         * @param {?} emoticons
         * @return {?}
         */
            function (short_names, name, keywords, emoticons) {
                /** @type {?} */
                var search = [];
                /** @type {?} */
                var addToSearch = ( /**
                 * @param {?} strings
                 * @param {?} split
                 * @return {?}
                 */function (strings, split) {
                    if (!strings) {
                        return;
                    }
                    (Array.isArray(strings) ? strings : [strings]).forEach(( /**
                     * @param {?} string
                     * @return {?}
                     */function (string) {
                        (split ? string.split(/[-|_|\s]+/) : [string]).forEach(( /**
                         * @param {?} s
                         * @return {?}
                         */function (s) {
                            s = s.toLowerCase();
                            if (!search.includes(s)) {
                                search.push(s);
                            }
                        }));
                    }));
                });
                addToSearch(short_names, true);
                addToSearch(name, true);
                addToSearch(keywords, false);
                addToSearch(emoticons, false);
                return search.join(',');
            };
        EmojiSearch.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        EmojiSearch.ctorParameters = function () {
            return [
                { type: i1.EmojiService }
            ];
        };
        /** @nocollapse */ EmojiSearch.ngInjectableDef = i0.defineInjectable({ factory: function EmojiSearch_Factory() { return new EmojiSearch(i0.inject(i1.EmojiService)); }, token: EmojiSearch, providedIn: "root" });
        return EmojiSearch;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /* tslint:disable max-line-length */
    /** @type {?} */
    var categories = {
        activity: "M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24m10 11h-5c.3-2.5 1.3-4.8 2-6.1a10 10 0 0 1 3 6.1m-9 0V2a10 10 0 0 1 4.4 1.6A18 18 0 0 0 15 11h-2zm-2 0H9a18 18 0 0 0-2.4-7.4A10 10 0 0 1 11 2.1V11zm0 2v9a10 10 0 0 1-4.4-1.6A18 18 0 0 0 9 13h2zm4 0a18 18 0 0 0 2.4 7.4 10 10 0 0 1-4.4 1.5V13h2zM5 4.9c.7 1.3 1.7 3.6 2 6.1H2a10 10 0 0 1 3-6.1M2 13h5c-.3 2.5-1.3 4.8-2 6.1A10 10 0 0 1 2 13m17 6.1c-.7-1.3-1.7-3.6-2-6.1h5a10 10 0 0 1-3 6.1",
        custom: "M10 1h3v21h-3zm10.186 4l1.5 2.598L3.5 18.098 2 15.5zM2 7.598L3.5 5l18.186 10.5-1.5 2.598z",
        flags: "M0 0l6 24h2L2 0zm21 5h-4l-1-4H4l3 12h3l1 4h13L21 5zM6.6 3h7.8l2 8H8.6l-2-8zm8.8 10l-2.9 1.9-.4-1.9h3.3zm3.6 0l-1.5-6h2l2 8H16l3-2z",
        foods: "M17 5c-1.8 0-2.9.4-3.7 1 .5-1.3 1.8-3 4.7-3a1 1 0 0 0 0-2c-3 0-4.6 1.3-5.5 2.5l-.2.2c-.6-1.9-1.5-3.7-3-3.7C8.5 0 7.7.3 7 1c-2 1.5-1.7 2.9-.5 4C3.6 5.2 0 7.4 0 13c0 4.6 5 11 9 11 2 0 2.4-.5 3-1 .6.5 1 1 3 1 4 0 9-6.4 9-11 0-6-4-8-7-8M8.2 2.5c.7-.5 1-.5 1-.5.4.2 1 1.4 1.4 3-1.6-.6-2.8-1.3-3-1.8l.6-.7M15 22c-1 0-1.2-.1-1.6-.4l-.1-.2a2 2 0 0 0-2.6 0l-.1.2c-.4.3-.5.4-1.6.4-2.8 0-7-5.4-7-9 0-6 4.5-6 5-6 2 0 2.5.4 3.4 1.2l.3.3a2 2 0 0 0 2.6 0l.3-.3c1-.8 1.5-1.2 3.4-1.2.5 0 5 .1 5 6 0 3.6-4.2 9-7 9",
        nature: "M15.5 8a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3m-7 0a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3m10.43-8h-.02c-.97 0-2.14.79-3.02 1.5A13.88 13.88 0 0 0 12 .99c-1.28 0-2.62.13-3.87.51C7.24.8 6.07 0 5.09 0h-.02C3.35 0 .07 2.67 0 7.03c-.04 2.47.28 4.23 1.04 5 .26.27.88.69 1.3.9.19 3.17.92 5.23 2.53 6.37.9.64 2.19.95 3.2 1.1-.03.2-.07.4-.07.6 0 1.77 2.35 3 4 3s4-1.23 4-3c0-.2-.04-.4-.07-.59 2.57-.38 5.43-1.87 5.92-7.58.4-.22.89-.57 1.1-.8.77-.76 1.09-2.52 1.05-5C23.93 2.67 20.65 0 18.93 0M3.23 9.13c-.24.29-.84 1.16-.9 1.24A9.67 9.67 0 0 1 2 7.08c.05-3.28 2.48-4.97 3.1-5.03.25.02.72.27 1.26.65A7.95 7.95 0 0 0 4 7.82c-.14.55-.4.86-.79 1.31M12 22c-.9 0-1.95-.7-2-1 0-.65.47-1.24 1-1.6v.6a1 1 0 1 0 2 0v-.6c.52.36 1 .95 1 1.6-.05.3-1.1 1-2 1m3-3.48v.02a4.75 4.75 0 0 0-1.26-1.02c1.09-.52 2.24-1.33 2.24-2.22 0-1.84-1.78-2.2-3.98-2.2s-3.98.36-3.98 2.2c0 .89 1.15 1.7 2.24 2.22A4.8 4.8 0 0 0 9 18.54v-.03a6.1 6.1 0 0 1-2.97-.84c-1.3-.92-1.84-3.04-1.86-6.48l.03-.04c.5-.82 1.49-1.45 1.8-3.1C6 6 7.36 4.42 8.36 3.53c1.01-.35 2.2-.53 3.59-.53 1.45 0 2.68.2 3.73.57 1 .9 2.32 2.46 2.32 4.48.31 1.65 1.3 2.27 1.8 3.1l.1.18c-.06 5.97-1.95 7.01-4.9 7.19m6.63-8.2l-.11-.2a7.59 7.59 0 0 0-.74-.98 3.02 3.02 0 0 1-.79-1.32 7.93 7.93 0 0 0-2.35-5.12c.53-.38 1-.63 1.26-.65.64.07 3.05 1.77 3.1 5.03.02 1.81-.35 3.22-.37 3.24",
        objects: "M12 0a9 9 0 0 0-5 16.5V21s2 3 5 3 5-3 5-3v-4.5A9 9 0 0 0 12 0zm0 2a7 7 0 1 1 0 14 7 7 0 0 1 0-14zM9 17.5a9 9 0 0 0 6 0v.8a7 7 0 0 1-3 .7 7 7 0 0 1-3-.7v-.8zm.2 3a8.9 8.9 0 0 0 2.8.5c1 0 1.9-.2 2.8-.5-.6.7-1.6 1.5-2.8 1.5-1.1 0-2.1-.8-2.8-1.5zm5.5-8.1c-.8 0-1.1-.8-1.5-1.8-.5-1-.7-1.5-1.2-1.5s-.8.5-1.3 1.5c-.4 1-.8 1.8-1.6 1.8h-.3c-.5-.2-.8-.7-1.3-1.8l-.2-1A3 3 0 0 0 7 9a1 1 0 0 1 0-2c1.7 0 2 1.4 2.2 2.1.5-1 1.3-2 2.8-2 1.5 0 2.3 1.1 2.7 2.1.2-.8.6-2.2 2.3-2.2a1 1 0 1 1 0 2c-.2 0-.3.5-.3.7a6.5 6.5 0 0 1-.3 1c-.5 1-.8 1.7-1.7 1.7",
        people: "M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24m0 22a10 10 0 1 1 0-20 10 10 0 0 1 0 20M8 7a2 2 0 1 0 0 4 2 2 0 0 0 0-4m8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4m-.8 8c-.7 1.2-1.8 2-3.3 2-1.5 0-2.7-.8-3.4-2H15m3-2H6a6 6 0 1 0 12 0",
        places: "M6.5 12a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5m0 3c-.3 0-.5-.2-.5-.5s.2-.5.5-.5.5.2.5.5-.2.5-.5.5m11-3a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5m0 3c-.3 0-.5-.2-.5-.5s.2-.5.5-.5.5.2.5.5-.2.5-.5.5m5-5.5l-1-.4-.1-.1h.6c.6 0 1-.4 1-1 0-1-.9-2-2-2h-.6l-.8-1.7A3 3 0 0 0 16.8 2H7.2a3 3 0 0 0-2.8 2.3L3.6 6H3a2 2 0 0 0-2 2c0 .6.4 1 1 1h.6v.1l-1 .4a2 2 0 0 0-1.4 2l.7 7.6a1 1 0 0 0 1 .9H3v1c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2v-1h6v1c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2v-1h1.1a1 1 0 0 0 1-.9l.7-7.5a2 2 0 0 0-1.3-2.1M6.3 4.9c.1-.5.5-.9 1-.9h9.5c.4 0 .8.4 1 .9L19.2 9H4.7l1.6-4.1zM7 21H5v-1h2v1zm12 0h-2v-1h2v1zm2.2-3H2.8l-.7-6.6.9-.4h18l.9.4-.7 6.6z",
        recent: "M13 4h-2v7H9v2h2v2h2v-2h4v-2h-4zm-1-4a12 12 0 1 0 0 24 12 12 0 0 0 0-24m0 22a10 10 0 1 1 0-20 10 10 0 0 1 0 20",
        symbols: "M0 0h11v2H0zm4 11h3V6h4V4H0v2h4zm11.5 6a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5m0-2.99a.5.5 0 0 1 0 .99c-.28 0-.5-.22-.5-.5s.22-.49.5-.49m6 5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5m0 2.99a.5.5 0 0 1-.5-.5.5.5 0 0 1 1 .01.5.5 0 0 1-.5.49m.5-9l-9 9 1.51 1.5 9-9zm-5-2c2.2 0 4-1.12 4-2.5V2s.98-.16 1.5.95C23 4.05 23 6 23 6s1-1.12 1-3.13C24-.02 21 0 21 0h-2v6.35A5.85 5.85 0 0 0 17 6c-2.2 0-4 1.12-4 2.5s1.8 2.5 4 2.5m-6.7 9.48L8.82 18.9a47.54 47.54 0 0 1-1.44 1.13c-.3-.3-.99-1.02-2.04-2.19.9-.83 1.47-1.46 1.72-1.89s.38-.87.38-1.33c0-.6-.27-1.18-.82-1.76-.54-.58-1.33-.87-2.35-.87-1 0-1.79.29-2.34.87-.56.6-.83 1.18-.83 1.79 0 .81.42 1.75 1.25 2.8a6.57 6.57 0 0 0-1.8 1.79 3.46 3.46 0 0 0-.51 1.83c0 .86.3 1.56.92 2.1a3.5 3.5 0 0 0 2.42.83c1.17 0 2.44-.38 3.81-1.14L8.23 24h2.82l-2.09-2.38 1.34-1.14zM3.56 14.1a1.02 1.02 0 0 1 .73-.28c.31 0 .56.08.75.25a.85.85 0 0 1 .28.66c0 .52-.42 1.11-1.26 1.78-.53-.65-.8-1.23-.8-1.74a.9.9 0 0 1 .3-.67m.18 7.9c-.43 0-.78-.12-1.06-.35-.28-.23-.41-.49-.41-.76 0-.6.5-1.3 1.52-2.09a31.23 31.23 0 0 0 2.25 2.44c-.92.5-1.69.76-2.3.76",
    };
    /** @type {?} */
    var search = {
        search: "M12.9 14.32a8 8 0 1 1 1.41-1.41l5.35 5.33-1.42 1.42-5.33-5.34zM8 14A6 6 0 1 0 8 2a6 6 0 0 0 0 12z",
        delete: "M10 8.586L2.929 1.515 1.515 2.929 8.586 10l-7.071 7.071 1.414 1.414L10 11.414l7.071 7.071 1.414-1.414L11.414 10l7.071-7.071-1.414-1.414L10 8.586z",
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var I18N = {
        search: 'Search',
        emojilist: 'List of emoji',
        notfound: 'No Emoji Found',
        categories: {
            search: 'Search Results',
            recent: 'Frequently Used',
            people: 'Smileys & People',
            nature: 'Animals & Nature',
            foods: 'Food & Drink',
            activity: 'Activity',
            places: 'Travel & Places',
            objects: 'Objects',
            symbols: 'Symbols',
            flags: 'Flags',
            custom: 'Custom',
        },
    };
    var PickerComponent = /** @class */ (function () {
        function PickerComponent(ref, frequently) {
            var _this = this;
            this.ref = ref;
            this.frequently = frequently;
            this.perLine = 9;
            this.totalFrequentLines = 4;
            this.i18n = {};
            this.style = {};
            this.title = 'Emoji Mart™';
            this.emoji = 'department_store';
            this.color = '#ae65c5';
            this.hideObsolete = true;
            /**
             * all categories shown
             */
            this.categories = [];
            /**
             * used to temporarily draw categories
             */
            this.activeCategories = [];
            this.set = 'apple';
            this.skin = 1;
            /**
             * Renders the native unicode emoji
             */
            this.isNative = false;
            this.emojiSize = 24;
            this.sheetSize = 64;
            this.showPreview = true;
            this.emojiTooltip = false;
            this.autoFocus = false;
            this.custom = [];
            this.hideRecent = true;
            this.notFoundEmoji = 'sleuth_or_spy';
            this.categoriesIcons = categories;
            this.searchIcons = search;
            this.showSingleCategory = false;
            this.emojiClick = new i0.EventEmitter();
            this.emojiSelect = new i0.EventEmitter();
            this.skinChange = new i0.EventEmitter();
            this.scrollHeight = 0;
            this.clientHeight = 0;
            this.firstRender = true;
            this.NAMESPACE = 'emoji-mart';
            this.measureScrollbar = 0;
            this.RECENT_CATEGORY = {
                id: 'recent',
                name: 'Recent',
                emojis: null,
            };
            this.SEARCH_CATEGORY = {
                id: 'search',
                name: 'Search',
                emojis: null,
                anchor: false,
            };
            this.CUSTOM_CATEGORY = {
                id: 'custom',
                name: 'Custom',
                emojis: [],
            };
            this.backgroundImageFn = ( /**
             * @param {?} set
             * @param {?} sheetSize
             * @return {?}
             */function (set, sheetSize) {
                return "https://unpkg.com/emoji-datasource-" + _this.set + "@4.0.4/img/" + _this.set + "/sheets-256/" + _this.sheetSize + ".png";
            });
        }
        /**
         * @return {?}
         */
        PickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var e_1, _a;
                // measure scroll
                this.measureScrollbar = measureScrollbar();
                this.i18n = __assign({}, I18N, this.i18n);
                this.i18n.categories = __assign({}, I18N.categories, this.i18n.categories);
                this.skin =
                    JSON.parse(localStorage.getItem(this.NAMESPACE + ".skin") || 'null') ||
                        this.skin;
                /** @type {?} */
                var allCategories = __spread(i1.categories);
                if (this.custom.length > 0) {
                    this.CUSTOM_CATEGORY.emojis = this.custom.map(( /**
                     * @param {?} emoji
                     * @return {?}
                     */function (emoji) {
                        return __assign({}, emoji, { id: emoji.shortNames[0], custom: true });
                    }));
                    allCategories.push(this.CUSTOM_CATEGORY);
                }
                if (this.include !== undefined) {
                    allCategories.sort(( /**
                     * @param {?} a
                     * @param {?} b
                     * @return {?}
                     */function (a, b) {
                        if (( /** @type {?} */(_this.include)).indexOf(a.id) > ( /** @type {?} */(_this.include)).indexOf(b.id)) {
                            return 1;
                        }
                        return -1;
                    }));
                }
                try {
                    for (var allCategories_1 = __values(allCategories), allCategories_1_1 = allCategories_1.next(); !allCategories_1_1.done; allCategories_1_1 = allCategories_1.next()) {
                        var category = allCategories_1_1.value;
                        /** @type {?} */
                        var isIncluded = this.include && this.include.length
                            ? this.include.indexOf(category.id) > -1
                            : true;
                        /** @type {?} */
                        var isExcluded = this.exclude && this.exclude.length
                            ? this.exclude.indexOf(category.id) > -1
                            : false;
                        if (!isIncluded || isExcluded) {
                            continue;
                        }
                        if (this.emojisToShowFilter) {
                            /** @type {?} */
                            var newEmojis = [];
                            var emojis = category.emojis;
                            for (var emojiIndex = 0; emojiIndex < ( /** @type {?} */(emojis)).length; emojiIndex++) {
                                /** @type {?} */
                                var emoji = ( /** @type {?} */(emojis))[emojiIndex];
                                if (this.emojisToShowFilter(emoji)) {
                                    newEmojis.push(emoji);
                                }
                            }
                            if (newEmojis.length) {
                                /** @type {?} */
                                var newCategory = {
                                    emojis: newEmojis,
                                    name: category.name,
                                    id: category.id,
                                };
                                this.categories.push(newCategory);
                            }
                        }
                        else {
                            this.categories.push(category);
                        }
                        this.categoriesIcons = __assign({}, categories, this.categoriesIcons);
                        this.searchIcons = __assign({}, search, this.searchIcons);
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (allCategories_1_1 && !allCategories_1_1.done && (_a = allCategories_1.return))
                            _a.call(allCategories_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                /** @type {?} */
                var includeRecent = this.include && this.include.length
                    ? this.include.indexOf(this.RECENT_CATEGORY.id) > -1
                    : true;
                /** @type {?} */
                var excludeRecent = this.exclude && this.exclude.length
                    ? this.exclude.indexOf(this.RECENT_CATEGORY.id) > -1
                    : false;
                if (includeRecent && !excludeRecent) {
                    this.hideRecent = false;
                    this.categories.unshift(this.RECENT_CATEGORY);
                }
                if (this.categories[0]) {
                    this.categories[0].first = true;
                }
                this.categories.unshift(this.SEARCH_CATEGORY);
                this.selected = this.categories.filter(( /**
                 * @param {?} category
                 * @return {?}
                 */function (category) { return category.first; }))[0].name;
                this.setActiveCategories(this.activeCategories = this.categories.slice(0, 3));
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    _this.setActiveCategories(_this.categories);
                    _this.ref.markForCheck();
                    setTimeout(( /**
                     * @return {?}
                     */function () { return _this.updateCategoriesSize(); }));
                }));
            };
        /**
         * @param {?} categoriesToMakeActive
         * @return {?}
         */
        PickerComponent.prototype.setActiveCategories = /**
         * @param {?} categoriesToMakeActive
         * @return {?}
         */
            function (categoriesToMakeActive) {
                var _this = this;
                if (this.showSingleCategory) {
                    this.activeCategories = categoriesToMakeActive.filter(( /**
                     * @param {?} x
                     * @return {?}
                     */function (x) { return x.name === _this.selected; }));
                }
                else {
                    this.activeCategories = categoriesToMakeActive;
                }
            };
        /**
         * @return {?}
         */
        PickerComponent.prototype.updateCategoriesSize = /**
         * @return {?}
         */
            function () {
                this.categoryRefs.forEach(( /**
                 * @param {?} component
                 * @return {?}
                 */function (component) { return component.memoizeSize(); }));
                if (this.scrollRef) {
                    /** @type {?} */
                    var target = this.scrollRef.nativeElement;
                    this.scrollHeight = target.scrollHeight;
                    this.clientHeight = target.clientHeight;
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        PickerComponent.prototype.handleAnchorClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.updateCategoriesSize();
                this.selected = $event.category.name;
                this.setActiveCategories(this.categories);
                /** @type {?} */
                var component = this.categoryRefs.find(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return n.id === $event.category.id; }));
                if (this.SEARCH_CATEGORY.emojis) {
                    this.handleSearch(null);
                    this.searchRef.clear();
                }
                if (component) {
                    var top_1 = component.top;
                    if ($event.category.first) {
                        top_1 = 0;
                    }
                    else {
                        top_1 += 1;
                    }
                    this.scrollRef.nativeElement.scrollTop = top_1;
                }
                this.selected = $event.category.name;
                this.nextScroll = $event.category.name;
            };
        /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
        PickerComponent.prototype.categoryTrack = /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
            function (index, item) {
                return item.id;
            };
        /**
         * @return {?}
         */
        PickerComponent.prototype.handleScroll = /**
         * @return {?}
         */
            function () {
                var e_2, _a;
                if (this.nextScroll) {
                    this.selected = this.nextScroll;
                    this.nextScroll = undefined;
                    return;
                }
                if (!this.scrollRef) {
                    return;
                }
                if (this.showSingleCategory) {
                    return;
                }
                /** @type {?} */
                var activeCategory = null;
                if (this.SEARCH_CATEGORY.emojis) {
                    activeCategory = this.SEARCH_CATEGORY;
                }
                else {
                    /** @type {?} */
                    var target = this.scrollRef.nativeElement;
                    // check scroll is not at bottom
                    if (target.scrollTop === 0) {
                        // hit the TOP
                        activeCategory = this.categories.find(( /**
                         * @param {?} n
                         * @return {?}
                         */function (n) { return n.first === true; }));
                    }
                    else if (target.scrollHeight - target.scrollTop === this.clientHeight) {
                        // scrolled to bottom activate last category
                        activeCategory = this.categories[this.categories.length - 1];
                    }
                    else {
                        var _loop_1 = function (category) {
                            /** @type {?} */
                            var component = this_1.categoryRefs.find(( /**
                             * @param {?} n
                             * @return {?}
                             */function (n) { return n.id === category.id; }));
                            /** @type {?} */
                            var active = ( /** @type {?} */(component)).handleScroll(target.scrollTop);
                            if (active) {
                                activeCategory = category;
                            }
                        };
                        var this_1 = this;
                        try {
                            // scrolling
                            for (var _b = __values(this.categories), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var category = _c.value;
                                _loop_1(category);
                            }
                        }
                        catch (e_2_1) {
                            e_2 = { error: e_2_1 };
                        }
                        finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return))
                                    _a.call(_b);
                            }
                            finally {
                                if (e_2)
                                    throw e_2.error;
                            }
                        }
                    }
                    this.scrollTop = target.scrollTop;
                }
                if (activeCategory) {
                    this.selected = activeCategory.name;
                }
            };
        /**
         * @param {?} $emojis
         * @return {?}
         */
        PickerComponent.prototype.handleSearch = /**
         * @param {?} $emojis
         * @return {?}
         */
            function ($emojis) {
                var e_3, _a;
                this.SEARCH_CATEGORY.emojis = $emojis;
                try {
                    for (var _b = __values(this.categoryRefs.toArray()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var component = _c.value;
                        if (component.name === 'Search') {
                            component.emojis = $emojis;
                            component.updateDisplay($emojis ? 'block' : 'none');
                        }
                        else {
                            component.updateDisplay($emojis ? 'none' : 'block');
                        }
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                // this.forceUpdate();
                this.scrollRef.nativeElement.scrollTop = 0;
                this.handleScroll();
            };
        /**
         * @param {?} $event
         * @param {?=} emoji
         * @return {?}
         */
        PickerComponent.prototype.handleEnterKey = /**
         * @param {?} $event
         * @param {?=} emoji
         * @return {?}
         */
            function ($event, emoji) {
                if (!emoji) {
                    if (this.SEARCH_CATEGORY.emojis !== null && this.SEARCH_CATEGORY.emojis.length) {
                        emoji = this.SEARCH_CATEGORY.emojis[0];
                        if (emoji) {
                            this.emojiSelect.emit({ $event: $event, emoji: emoji });
                        }
                        else {
                            return;
                        }
                    }
                }
                if (!this.hideRecent && !this.recent) {
                    this.frequently.add(( /** @type {?} */(emoji)));
                }
                /** @type {?} */
                var component = this.categoryRefs.toArray()[1];
                if (component) {
                    component.getEmojis();
                    component.ref.markForCheck();
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        PickerComponent.prototype.handleEmojiOver = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (!this.showPreview || !this.previewRef) {
                    return;
                }
                /** @type {?} */
                var emojiData = ( /** @type {?} */(this.CUSTOM_CATEGORY.emojis)).find(( /**
                 * @param {?} customEmoji
                 * @return {?}
                 */function (customEmoji) { return customEmoji.id === $event.emoji.id; }));
                if (emojiData) {
                    $event.emoji = __assign({}, emojiData);
                }
                this.previewEmoji = $event.emoji;
                clearTimeout(this.leaveTimeout);
            };
        /**
         * @return {?}
         */
        PickerComponent.prototype.handleEmojiLeave = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.showPreview || !this.previewRef) {
                    return;
                }
                this.leaveTimeout = setTimeout(( /**
                 * @return {?}
                 */function () {
                    _this.previewEmoji = null;
                    _this.previewRef.ref.markForCheck();
                }), 16);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        PickerComponent.prototype.handleEmojiClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.emojiClick.emit($event);
                this.emojiSelect.emit($event);
                this.handleEnterKey($event.$event, $event.emoji);
            };
        /**
         * @param {?} skin
         * @return {?}
         */
        PickerComponent.prototype.handleSkinChange = /**
         * @param {?} skin
         * @return {?}
         */
            function (skin) {
                this.skin = skin;
                localStorage.setItem(this.NAMESPACE + ".skin", String(skin));
                this.skinChange.emit(skin);
            };
        /**
         * @return {?}
         */
        PickerComponent.prototype.getWidth = /**
         * @return {?}
         */
            function () {
                if (this.style.width) {
                    return this.style.width;
                }
                return this.perLine * (this.emojiSize + 12) + 12 + 2 + this.measureScrollbar + 'px';
            };
        PickerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'emoji-mart',
                        template: "<div class=\"emoji-mart\"\n  [style.width]=\"getWidth()\"\n  [ngStyle]=\"style\">\n  <div class=\"emoji-mart-bar\">\n    <emoji-mart-anchors\n      [categories]=\"categories\"\n      (anchorClick)=\"handleAnchorClick($event)\"\n      [color]=\"color\"\n      [selected]=\"selected\"\n      [i18n]=\"i18n\"\n      [icons]=\"categoriesIcons\"\n    ></emoji-mart-anchors>\n  </div>\n  <emoji-search\n    #searchRef\n    [i18n]=\"i18n\"\n    (search)=\"handleSearch($event)\"\n    (enterKey)=\"handleEnterKey($event)\"\n    [include]=\"include\"\n    [exclude]=\"exclude\"\n    [custom]=\"custom\"\n    [autoFocus]=\"autoFocus\"\n    [icons]=\"searchIcons\"\n    [emojisToShowFilter]=\"emojisToShowFilter\"\n  ></emoji-search>\n  <section #scrollRef class=\"emoji-mart-scroll\" (scroll)=\"handleScroll()\" [attr.aria-label]=\"i18n.emojilist\">\n    <emoji-category\n      *ngFor=\"let category of activeCategories; let idx = index; trackBy: categoryTrack\"\n      #categoryRef\n      [id]=\"category.id\"\n      [name]=\"category.name\"\n      [emojis]=\"category.emojis\"\n      [perLine]=\"perLine\"\n      [totalFrequentLines]=\"totalFrequentLines\"\n      [hasStickyPosition]=\"isNative\"\n      [i18n]=\"i18n\"\n      [hideObsolete]=\"hideObsolete\"\n      [notFoundEmoji]=\"notFoundEmoji\"\n      [custom]=\"category.id == RECENT_CATEGORY.id ? CUSTOM_CATEGORY.emojis : undefined\"\n      [recent]=\"category.id == RECENT_CATEGORY.id ? recent : undefined\"\n      [emojiIsNative]=\"isNative\"\n      [emojiSkin]=\"skin\"\n      [emojiSize]=\"emojiSize\"\n      [emojiSet]=\"set\"\n      [emojiSheetSize]=\"sheetSize\"\n      [emojiForceSize]=\"isNative\"\n      [emojiTooltip]=\"emojiTooltip\"\n      [emojiBackgroundImageFn]=\"backgroundImageFn\"\n      (emojiOver)=\"handleEmojiOver($event)\"\n      (emojiLeave)=\"handleEmojiLeave()\"\n      (emojiClick)=\"handleEmojiClick($event)\"\n    ></emoji-category>\n  </section>\n  <div class=\"emoji-mart-bar\" *ngIf=\"showPreview\">\n    <emoji-preview\n      #previewRef\n      [title]=\"title\"\n      [emoji]=\"previewEmoji\"\n      [idleEmoji]=\"emoji\"\n      [emojiIsNative]=\"isNative\"\n      [emojiSize]=\"38\"\n      [emojiSkin]=\"skin\"\n      [emojiSet]=\"set\"\n      [emojiSheetSize]=\"sheetSize\"\n      [emojiBackgroundImageFn]=\"backgroundImageFn\"\n      (skinChange)=\"handleSkinChange($event)\"\n    ></emoji-preview>\n  </div>\n</div>\n",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    }] }
        ];
        /** @nocollapse */
        PickerComponent.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef },
                { type: EmojiFrequentlyService }
            ];
        };
        PickerComponent.propDecorators = {
            perLine: [{ type: i0.Input }],
            totalFrequentLines: [{ type: i0.Input }],
            i18n: [{ type: i0.Input }],
            style: [{ type: i0.Input }],
            title: [{ type: i0.Input }],
            emoji: [{ type: i0.Input }],
            color: [{ type: i0.Input }],
            hideObsolete: [{ type: i0.Input }],
            categories: [{ type: i0.Input }],
            activeCategories: [{ type: i0.Input }],
            set: [{ type: i0.Input }],
            skin: [{ type: i0.Input }],
            isNative: [{ type: i0.Input }],
            emojiSize: [{ type: i0.Input }],
            sheetSize: [{ type: i0.Input }],
            emojisToShowFilter: [{ type: i0.Input }],
            showPreview: [{ type: i0.Input }],
            emojiTooltip: [{ type: i0.Input }],
            autoFocus: [{ type: i0.Input }],
            custom: [{ type: i0.Input }],
            hideRecent: [{ type: i0.Input }],
            include: [{ type: i0.Input }],
            exclude: [{ type: i0.Input }],
            notFoundEmoji: [{ type: i0.Input }],
            categoriesIcons: [{ type: i0.Input }],
            searchIcons: [{ type: i0.Input }],
            showSingleCategory: [{ type: i0.Input }],
            emojiClick: [{ type: i0.Output }],
            emojiSelect: [{ type: i0.Output }],
            skinChange: [{ type: i0.Output }],
            scrollRef: [{ type: i0.ViewChild, args: ['scrollRef',] }],
            previewRef: [{ type: i0.ViewChild, args: ['previewRef',] }],
            searchRef: [{ type: i0.ViewChild, args: ['searchRef',] }],
            categoryRefs: [{ type: i0.ViewChildren, args: ['categoryRef',] }],
            backgroundImageFn: [{ type: i0.Input }]
        };
        return PickerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PreviewComponent = /** @class */ (function () {
        function PreviewComponent(ref, emojiService) {
            this.ref = ref;
            this.emojiService = emojiService;
            this.skinChange = new i0.EventEmitter();
            this.emojiData = {};
        }
        /**
         * @return {?}
         */
        PreviewComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                if (!this.emoji) {
                    return;
                }
                this.emojiData = ( /** @type {?} */(this.emojiService.getData(this.emoji, this.emojiSkin, this.emojiSet)));
                /** @type {?} */
                var knownEmoticons = [];
                /** @type {?} */
                var listedEmoticons = [];
                /** @type {?} */
                var emoitcons = this.emojiData.emoticons || [];
                emoitcons.forEach(( /**
                 * @param {?} emoticon
                 * @return {?}
                 */function (emoticon) {
                    if (knownEmoticons.indexOf(emoticon.toLowerCase()) >= 0) {
                        return;
                    }
                    knownEmoticons.push(emoticon.toLowerCase());
                    listedEmoticons.push(emoticon);
                }));
                this.listedEmoticons = listedEmoticons;
            };
        PreviewComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'emoji-preview',
                        template: "\n  <div class=\"emoji-mart-preview\" *ngIf=\"emoji && emojiData\">\n    <div class=\"emoji-mart-preview-emoji\">\n      <ngx-emoji\n        [emoji]=\"emoji\"\n        [size]=\"38\"\n        [isNative]=\"emojiIsNative\"\n        [skin]=\"emojiSkin\"\n        [size]=\"emojiSize\"\n        [set]=\"emojiSet\"\n        [sheetSize]=\"emojiSheetSize\"\n        [backgroundImageFn]=\"emojiBackgroundImageFn\"\n      ></ngx-emoji>\n    </div>\n\n    <div class=\"emoji-mart-preview-data\">\n      <div class=\"emoji-mart-preview-name\">{{ emojiData.name }}</div>\n      <div class=\"emoji-mart-preview-shortnames\">\n        <span class=\"emoji-mart-preview-shortname\" *ngFor=\"let short_name of emojiData.shortNames\">\n          :{{ short_name }}:\n        </span>\n      </div>\n      <div class=\"emoji-mart-preview-emoticons\">\n        <span class=\"emoji-mart-preview-emoticon\" *ngFor=\"let emoticon of listedEmoticons\">\n          {{ emoticon }}\n        </span>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"emoji-mart-preview\" *ngIf=\"!emoji\">\n    <div class=\"emoji-mart-preview-emoji\">\n      <ngx-emoji *ngIf=\"idleEmoji && idleEmoji.length\"\n        [isNative]=\"emojiIsNative\"\n        [skin]=\"emojiSkin\"\n        [set]=\"emojiSet\"\n        [emoji]=\"idleEmoji\"\n        [backgroundImageFn]=\"emojiBackgroundImageFn\"\n        [size]=\"38\"\n      ></ngx-emoji>\n    </div>\n\n    <div class=\"emoji-mart-preview-data\">\n      <span class=\"emoji-mart-title-label\">{{ title }}</span>\n    </div>\n\n    <div class=\"emoji-mart-preview-skins\">\n      <emoji-skins [skin]=\"emojiSkin\" (change)=\"skinChange.emit($event)\">\n      </emoji-skins>\n    </div>\n  </div>\n  ",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    }] }
        ];
        /** @nocollapse */
        PreviewComponent.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef },
                { type: i1.EmojiService }
            ];
        };
        PreviewComponent.propDecorators = {
            title: [{ type: i0.Input }],
            emoji: [{ type: i0.Input }],
            idleEmoji: [{ type: i0.Input }],
            emojiIsNative: [{ type: i0.Input }],
            emojiSkin: [{ type: i0.Input }],
            emojiSize: [{ type: i0.Input }],
            emojiSet: [{ type: i0.Input }],
            emojiSheetSize: [{ type: i0.Input }],
            emojiBackgroundImageFn: [{ type: i0.Input }],
            skinChange: [{ type: i0.Output }]
        };
        return PreviewComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchComponent = /** @class */ (function () {
        function SearchComponent(emojiSearch) {
            this.emojiSearch = emojiSearch;
            this.maxResults = 75;
            this.autoFocus = false;
            this.include = [];
            this.exclude = [];
            this.custom = [];
            this.search = new i0.EventEmitter();
            this.enterKey = new i0.EventEmitter();
            this.isSearching = false;
            this.query = '';
        }
        /**
         * @return {?}
         */
        SearchComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.icon = ( /** @type {?} */(this.icons)).search;
            };
        /**
         * @return {?}
         */
        SearchComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (this.autoFocus) {
                    this.inputRef.nativeElement.focus();
                }
            };
        /**
         * @return {?}
         */
        SearchComponent.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.query = '';
                this.handleSearch('');
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchComponent.prototype.handleEnterKey = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.enterKey.emit($event);
                $event.preventDefault();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        SearchComponent.prototype.handleSearch = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value === '') {
                    this.icon = ( /** @type {?} */(this.icons)).search;
                    this.isSearching = false;
                }
                else {
                    this.icon = ( /** @type {?} */(this.icons)).delete;
                    this.isSearching = true;
                }
                this.search.emit(this.emojiSearch.search(this.query, this.emojisToShowFilter, this.maxResults, this.include, this.exclude, this.custom));
            };
        /**
         * @return {?}
         */
        SearchComponent.prototype.handleChange = /**
         * @return {?}
         */
            function () {
                this.handleSearch(this.query);
            };
        SearchComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'emoji-search',
                        template: "\n  <div class=\"emoji-mart-search\">\n    <input #inputRef type=\"text\"\n      (keyup.enter)=\"handleEnterKey($event)\"\n      [placeholder]=\"i18n.search\" [autofocus]=\"autoFocus\"\n      [(ngModel)]=\"query\" (ngModelChange)=\"handleChange()\" />\n    <button class=\"emoji-mart-search-icon\"\n      (click)=\"clear()\"\n      (keyup.enter)=\"clear()\"\n      [disabled]=\"!isSearching\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" width=\"13\" height=\"13\" opacity=\"0.5\">\n        <path [attr.d]=\"icon\" />\n      </svg>\n    </button>\n  </div>\n  ",
                        preserveWhitespaces: false
                    }] }
        ];
        /** @nocollapse */
        SearchComponent.ctorParameters = function () {
            return [
                { type: EmojiSearch }
            ];
        };
        SearchComponent.propDecorators = {
            maxResults: [{ type: i0.Input }],
            autoFocus: [{ type: i0.Input }],
            i18n: [{ type: i0.Input }],
            include: [{ type: i0.Input }],
            exclude: [{ type: i0.Input }],
            custom: [{ type: i0.Input }],
            icons: [{ type: i0.Input }],
            emojisToShowFilter: [{ type: i0.Input }],
            search: [{ type: i0.Output }],
            enterKey: [{ type: i0.Output }],
            inputRef: [{ type: i0.ViewChild, args: ['inputRef',] }]
        };
        return SearchComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SkinComponent = /** @class */ (function () {
        function SkinComponent() {
            this.change = new i0.EventEmitter();
            this.opened = false;
            this.skinTones = [1, 2, 3, 4, 5, 6];
        }
        /**
         * @return {?}
         */
        SkinComponent.prototype.toggleOpen = /**
         * @return {?}
         */
            function () {
                this.opened = !this.opened;
            };
        /**
         * @param {?} skin
         * @return {?}
         */
        SkinComponent.prototype.handleClick = /**
         * @param {?} skin
         * @return {?}
         */
            function (skin) {
                if (!this.opened) {
                    this.opened = true;
                    return;
                }
                this.opened = false;
                if (skin !== this.skin) {
                    this.change.emit(skin);
                }
            };
        SkinComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'emoji-skins',
                        template: "\n  <div class=\"emoji-mart-skin-swatches\" [class.emoji-mart-skin-swatches-opened]=\"opened\">\n    <span *ngFor=\"let skinTone of skinTones\" class=\"emoji-mart-skin-swatch\"\n      [class.emoji-mart-skin-swatch-selected]=\"skinTone === skin\">\n        <span (click)=\"this.handleClick(skinTone)\"\n          class=\"emoji-mart-skin emoji-mart-skin-tone-{{ skinTone }}\"\n        ></span>\n      </span>\n  </div>\n  ",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    }] }
        ];
        SkinComponent.propDecorators = {
            skin: [{ type: i0.Input }],
            change: [{ type: i0.Output }]
        };
        return SkinComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var components = [
        PickerComponent,
        AnchorsComponent,
        CategoryComponent,
        SearchComponent,
        PreviewComponent,
        SkinComponent,
    ];
    var PickerModule = /** @class */ (function () {
        function PickerModule() {
        }
        PickerModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [common.CommonModule, forms.FormsModule, i1.EmojiModule],
                        exports: components,
                        declarations: components,
                    },] }
        ];
        return PickerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.AnchorsComponent = AnchorsComponent;
    exports.CategoryComponent = CategoryComponent;
    exports.EmojiFrequentlyService = EmojiFrequentlyService;
    exports.EmojiSearch = EmojiSearch;
    exports.PickerComponent = PickerComponent;
    exports.PickerModule = PickerModule;
    exports.PreviewComponent = PreviewComponent;
    exports.SearchComponent = SearchComponent;
    exports.SkinComponent = SkinComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ctrl-ngx-emoji-mart.umd.js.map